#ifndef EXPORT_FUNCS_H
#define EXPORT_FUNCS_H

#if defined _WIN32 || defined __CYGWIN__
    /// `PLUGINSDK_EXPORTS` is a macro. It is defined inside the DLL, so when applications include this file, they automaticly import these symbols.
    /// Project `NEWorld` has a dependency on this `PluginSDK`, so `NEWorld` can use the `PluginSDK.lib` generated by MSVC compiler on Windows.
    /// On other platforms, it is necessery to compile `PluginSDK` first, and use the `PluginSDK.a` to compile `NEWorld`.
    #ifdef PLUGINSDK_EXPORTS
        #ifdef _MSC_VER
            #define DLLIMPEXP __declspec(dllexport)
        #else
            #define DLLIMPEXP __attribute__ ((dllexport))
        #endif
    #else
        #ifdef _MSC_VER
            #define DLLIMPEXP __declspec(dllimport)
        #else
            #define DLLIMPEXP __attribute__ ((dllimport))
        #endif
    #endif
#else
    #define DLLIMPEXP __attribute__ ((visibility ("default")))
#endif

#ifdef __cplusplus
extern "C"
{
#endif

typedef struct
{
    wchar_t *name, *description;
} plugin_information;

typedef plugin_information* (*get_information)();
typedef int(*init_function)();
typedef void(*unload_function)();
typedef int(*command_function)(int argc, const wchar_t** argv);

DLLIMPEXP void load_plugins(wchar_t const * const filename);
DLLIMPEXP void unload_plugins();

DLLIMPEXP void* get_shared_data(wchar_t const * const key);
DLLIMPEXP void set_shared_data(wchar_t const * const key, void* const data);

DLLIMPEXP command_function get_command(wchar_t const * const name);
DLLIMPEXP void register_command(wchar_t const * const name, command_function func);

DLLIMPEXP unsigned short get_block(int x, int y, int z);
DLLIMPEXP void update_block(int x, int y, int z, char val);

#ifdef __cplusplus
}
#endif


#endif //EXPORT_FUNCS_H
